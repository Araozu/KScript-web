titulo: Funciones
subtemas:
  - titulo: Estructura
    txt:
      - |
        $
        fun nombre param1 param2 =
            expr

        nombre 10 20

        // Funcion sin argumentos
        fun devolverHola () = "Hola"

        sea hola = devolverHola ()
  - titulo: Parámetros anotados
    txt:
      - |
        $
        fun nombreCompleto (nombre: Txt) (apellido: Txt) : Txt =
            nombre <> " " <> Apellido

        fun sumarYConvertirAStr n1 n2 : Txt =
            (n1 + n2).toString()

        fun (sumar: Num -> Num -> Num) n1 n2 = n1 + n2
  - titulo: Currying / Aplicación parcial
    txt:
      - |
        $
        fun sumar x y z = x + y + z

        sea sumar10 = sumar 10
        sumar10 20 30  //: 60

        sea sumar50 = sumar10 40
        sumar50 -10  //: 40
  - titulo: Signatura
    txt:
      - |
        $
        // Num -> Num -> Num
        fun sumar x y = x + y

        // (Num -> Num -> Num)
        fun aplicar f = f 10 + 20

        // Txt -> (Txt -> Txt)
        fun imbuir saludo =
            fun saludar nombre =
                saludo <> " " <> nombre

            saludar
  - titulo: Operadores
    txt:
      - |
        $
        fun (<>) s1 s2 = s1.concat s2

        "Hola " <> "mundo"  //: Hola mundo

        fun (>*>) s1 s2 = s1.concat s2

        "Hola " >*> "mundo" //: Hola mundo

        // Notacion prefija
        (>*>) "Hola " "mundo"  //: Hola mundo

        // Currying
        sea saludar = (>*>) "Hola "

        saludar "Pedro"  //: Hola Pedro
        saludar "Juan"   //: Hola Juan

        // Otra forma de curryng
        // El operador debe estar junto al operador, sin espacios
        sea esMenorA10 = 10>
        esMenorA10 20  //: false

        sea esMayorA10 = >10
        esMayorA10 20  //: true
  - titulo: Parametros opcionales
    txt:
      - |
        En sí, Kan no tiene parámetros opcionales. Para simular ese comportamiento
        se usa un tipo indefinido como parámetro.
      - |
        $
        // Num -> Num? -> Num
        fun areaCuadrilatero base (altura: Num?) =
            // Re-definir altura
            sea altura' = si altura? -> altura sino base

            base * altura'

        areaCuadrilatero 10 20  //: 200
        areaCuadrilatero 10 ()  //: 100
  - titulo: Parámetros por defecto
    txt:
      - |
        $
        // Num -> Num
        fun areaCirculo (radio = 1) = Math.PI * radio ** 2

        areaCirculo 5  //: 78.539816...
        areaCirculo _  //: 3.141592...


        fun areaTriangulo (base = 1) altura =
            (base * altura) / 2

        areaTriangulo 2 4  //: 4
        areaTriangulo _ 5  //: 2.5

        // Con currying
        sea f1 = areaTriangulo _
        f1 5   //: 2.5
        f1 10  //: 5
  - titulo: Parámetros nombrados
    txt:
      - |
        $
        fun areaTriangulo base altura =
            (base * altura) / 2

        areaTriangulo (~base = 10) 20  //: 100
        areaTriangulo (~base = 10) (~altura = 20) //: 100
        areaTriangulo (~altura = 20) (~base = 10) //: 100

        areaTriangulo
            ~base = 10
            ~altura = 20


        // Tener nombres 'publicos' y nombres 'privados'
        fun areaTriangulo b~base h~altura =
            (b * h) / 2

        areaTriangulo (~base = 10) 20
        areaTriangulo
            ~base = 10
            20
  - titulo: Parametros en varias lineas
    txt:
      - |
        $
        fun saludar
        | s~saludo = "Hola"
        | n~nombre = ""
        | f~final = ""
        =
            console.log (s <> " " <> n <> f)

        saludar "Bienvenido" "Pedro" "!"  //: Bienvenido Pedro!
        saludar _ _ _    //: Hola
        saludar _ _ "!"  //: Hola!
  - titulo: Funciones anonimas
    txt:
      - |
        $
        sea funAnonima = fn x y -> x + y

        sea funAnonima: Num -> Num -> Num = fn x y -> x + y

        sea elevarAlCuadrado = fn (x: Num) -> x ** 2
  - titulo: Conductores
    txt:
      - |
        $
        console.log ("El resultado es " <> (10 + 20))

        console.log <| "El resultado es " <> (10 + 20)

        "El resultado es" <> (10 + 20) |> console.log
  - titulo: Composicion
    txt:
      - |
        $
        // ('A -> 'B) -> ('B -> C) -> ('A -> 'C)
        fun (>>) f g = fn x -> g (f x)

        sea masDosPorDos = (+2) >> (*2)

        masDosPorDos 10  //: 24
        masDosPorDos 23  //: 50

        sea porDosMasDos = (*2) >> (+2)

        porDosMasDos 10  //: 22
        porDosMasDos 23  //: 48

        // Inverso
        // ('A -> 'B) -> ('C -> 'A) -> ('C -> 'B)
        fun (<<) f g = fn x -> f (g x)

        sea porDosMasDos = (+2) << (*2)
        sea masDosPorDos = (*2) << (+2)
  - titulo: Funciones flecha
    txt:
      - |
        $
        // Para usar funciones flecha se usa una fun. anonima
        sea funFlecha = fn x y => x + y
  - titulo: Rest/Spread
    txt:
      - |
        Aun por definir...
