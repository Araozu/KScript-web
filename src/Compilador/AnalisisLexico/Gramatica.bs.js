// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Lexer$KanComp = require("./Lexer.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var operadores = /* :: */[
  "+",
  /* :: */[
    "-",
    /* :: */[
      "=",
      /* :: */[
        "*",
        /* :: */[
          "!",
          /* :: */[
            "\\",
            /* :: */[
              "/",
              /* :: */[
                "'",
                /* :: */[
                  "|",
                  /* :: */[
                    "@",
                    /* :: */[
                      "#",
                      /* :: */[
                        "\xc2\xb7",
                        /* :: */[
                          "$",
                          /* :: */[
                            "~",
                            /* :: */[
                              "%",
                              /* :: */[
                                "\xc2\xa6",
                                /* :: */[
                                  "&",
                                  /* :: */[
                                    "?",
                                    /* :: */[
                                      "\xc2\xbf",
                                      /* :: */[
                                        "\xc2\xa1",
                                        /* :: */[
                                          "<",
                                          /* :: */[
                                            ">",
                                            /* :: */[
                                              "\xe2\x82\xac",
                                              /* :: */[
                                                "^",
                                                /* :: */[
                                                  "-",
                                                  /* :: */[
                                                    ".",
                                                    /* :: */[
                                                      ":",
                                                      /* :: */[
                                                        ",",
                                                        /* :: */[
                                                          ";",
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var digitos = /* :: */[
  "0",
  /* :: */[
    "1",
    /* :: */[
      "2",
      /* :: */[
        "3",
        /* :: */[
          "4",
          /* :: */[
            "5",
            /* :: */[
              "6",
              /* :: */[
                "7",
                /* :: */[
                  "8",
                  /* :: */[
                    "9",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var mayusculas = /* :: */[
  "A",
  /* :: */[
    "B",
    /* :: */[
      "C",
      /* :: */[
        "D",
        /* :: */[
          "E",
          /* :: */[
            "F",
            /* :: */[
              "G",
              /* :: */[
                "H",
                /* :: */[
                  "I",
                  /* :: */[
                    "J",
                    /* :: */[
                      "K",
                      /* :: */[
                        "L",
                        /* :: */[
                          "M",
                          /* :: */[
                            "N",
                            /* :: */[
                              "O",
                              /* :: */[
                                "P",
                                /* :: */[
                                  "Q",
                                  /* :: */[
                                    "R",
                                    /* :: */[
                                      "S",
                                      /* :: */[
                                        "T",
                                        /* :: */[
                                          "U",
                                          /* :: */[
                                            "V",
                                            /* :: */[
                                              "W",
                                              /* :: */[
                                                "X",
                                                /* :: */[
                                                  "Y",
                                                  /* :: */[
                                                    "Z",
                                                    /* :: */[
                                                      "\xc3\x91",
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var minusculas = /* :: */[
  "a",
  /* :: */[
    "b",
    /* :: */[
      "c",
      /* :: */[
        "d",
        /* :: */[
          "e",
          /* :: */[
            "f",
            /* :: */[
              "g",
              /* :: */[
                "h",
                /* :: */[
                  "i",
                  /* :: */[
                    "j",
                    /* :: */[
                      "k",
                      /* :: */[
                        "l",
                        /* :: */[
                          "m",
                          /* :: */[
                            "n",
                            /* :: */[
                              "o",
                              /* :: */[
                                "p",
                                /* :: */[
                                  "q",
                                  /* :: */[
                                    "r",
                                    /* :: */[
                                      "s",
                                      /* :: */[
                                        "t",
                                        /* :: */[
                                          "u",
                                          /* :: */[
                                            "v",
                                            /* :: */[
                                              "w",
                                              /* :: */[
                                                "x",
                                                /* :: */[
                                                  "y",
                                                  /* :: */[
                                                    "z",
                                                    /* :: */[
                                                      "\xc3\xb1",
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var parseDigito = Lexer$KanComp.cualquier(digitos);

var parseMayuscula = Lexer$KanComp.cualquier(mayusculas);

var parseMinuscula = Lexer$KanComp.cualquier(minusculas);

var parseGuionBajo = Lexer$KanComp.parseCaracter("_");

var parseComillaSimple = Lexer$KanComp.parseCaracter("'");

var parseDolar = Lexer$KanComp.parseCaracter("$");

function charListToStr(caracteres) {
  var _acc = "";
  var _param = caracteres;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = acc + param[0];
      continue ;
    } else {
      return acc;
    }
  };
}

var parseOperador = Lexer$KanComp.cualquier(operadores);

var parseOperadores = Lexer$KanComp.mapP(charListToStr, Lexer$KanComp.parseVarios1(parseOperador));

var parseNumeros = Lexer$KanComp.mapP(charListToStr, Lexer$KanComp.parseVarios1(parseDigito));

var parsePunto = Lexer$KanComp.parseCaracter(".");

var parseParteDecimal = Lexer$KanComp.mapP((function (param) {
        return param[0] + param[1];
      }), Lexer$KanComp.$pipe$great$great$pipe(parsePunto, parseNumeros));

function funPass(param) {
  var decimal = param[1];
  return param[0] + (
          decimal !== undefined ? decimal : ""
        );
}

var parseNumero = Lexer$KanComp.mapP(funPass, Lexer$KanComp.$less$question$great(parseNumeros, parseParteDecimal));

var parseComilla = Lexer$KanComp.parseCaracter("\"");

var parseResto = Lexer$KanComp.mapP(charListToStr, Lexer$KanComp.parseVarios(Lexer$KanComp.parseCualquierMenos("\"")));

var parseTexto = Lexer$KanComp.between(parseComilla, parseResto, parseComilla);

var parseNuevaLCarac = Lexer$KanComp.parseCaracter("\n");

var parseNuevoWin = Lexer$KanComp.parseCaracter("\r");

var parseNuevaLineaWin = Lexer$KanComp.mapP((function (param) {
        return param[0] + param[1];
      }), Lexer$KanComp.$pipe$great$great$pipe(parseNuevoWin, parseNuevaLCarac));

var parseNuevaLinea = Lexer$KanComp.$less$pipe$great(parseNuevaLCarac, parseNuevaLineaWin);

var parseBarra = Lexer$KanComp.parseCaracter("/");

var parseInicio = Lexer$KanComp.$less$bang$great((function (param) {
        return "//";
      }), Lexer$KanComp.$pipe$great$great$pipe(parseBarra, parseBarra));

var parseResto$1 = Lexer$KanComp.$less$bang$great(charListToStr, Lexer$KanComp.parseVarios(Lexer$KanComp.parseCualquierMenosP(parseNuevaLinea)));

var parseComentario = Lexer$KanComp.$less$bang$great((function (param) {
        return param[0] + param[1];
      }), Lexer$KanComp.$pipe$great$great$pipe(parseInicio, parseResto$1));

var parseBarra$1 = Lexer$KanComp.parseCaracter("/");

var parseAst = Lexer$KanComp.parseCaracter("*");

var parseInicio$1 = Lexer$KanComp.$less$bang$great((function (param) {
        return "/*";
      }), Lexer$KanComp.$pipe$great$great$pipe(parseBarra$1, parseAst));

var parseFinal = Lexer$KanComp.$less$bang$great((function (param) {
        return "*/";
      }), Lexer$KanComp.$pipe$great$great$pipe(parseAst, parseBarra$1));

var parseResto$2 = Lexer$KanComp.$less$bang$great(charListToStr, Lexer$KanComp.parseVarios(Lexer$KanComp.parseCualquierMenosP(parseFinal)));

var parseComentarioMulti = Lexer$KanComp.$less$bang$great((function (param) {
        var match = param[0];
        return match[0] + (match[1] + param[1]);
      }), Lexer$KanComp.$pipe$great$great$pipe(Lexer$KanComp.$pipe$great$great$pipe(parseInicio$1, parseResto$2), parseFinal));

var pTest = Lexer$KanComp.$less$pipe$great(Lexer$KanComp.$less$pipe$great(Lexer$KanComp.$less$pipe$great(Lexer$KanComp.$less$pipe$great(Lexer$KanComp.$less$pipe$great(parseDigito, parseMayuscula), parseMinuscula), parseGuionBajo), parseComillaSimple), parseDolar);

var parseRestoIdentificador = Lexer$KanComp.mapP(charListToStr, Lexer$KanComp.parseVarios(pTest));

function tuplaAStr(param) {
  var match = param[0];
  return match[0] + (match[1] + param[1]);
}

var parseGenerico = Lexer$KanComp.mapP(tuplaAStr, Lexer$KanComp.$pipe$great$great$pipe(Lexer$KanComp.$pipe$great$great$pipe(parseComillaSimple, parseMayuscula), parseRestoIdentificador));

var parseIdentificador = Lexer$KanComp.mapP((function (param) {
        return param[0] + param[1];
      }), Lexer$KanComp.$pipe$great$great$pipe(Lexer$KanComp.$less$pipe$great(Lexer$KanComp.$less$pipe$great(parseGuionBajo, parseMinuscula), parseDolar), parseRestoIdentificador));

var parseIdentificadorTipo = Lexer$KanComp.mapP((function (param) {
        return param[0] + param[1];
      }), Lexer$KanComp.$pipe$great$great$pipe(parseMayuscula, parseRestoIdentificador));

var pEB = Lexer$KanComp.parseCaracter(" ");

var parseIdEspBlanco = Lexer$KanComp.mapP(charListToStr, Lexer$KanComp.parseVarios1(pEB));

var pTab = Lexer$KanComp.parseCaracter("\t");

var parseIndentacion = Lexer$KanComp.$less$pipe$great(parseIdEspBlanco, pTab);

var parseParenAb = Lexer$KanComp.parseCaracter("(");

var parseParenCer = Lexer$KanComp.parseCaracter(")");

var parseLlaveAb = Lexer$KanComp.parseCaracter("{");

var parseLlaveCer = Lexer$KanComp.parseCaracter("}");

var parseCorcheteAb = Lexer$KanComp.parseCaracter("[");

var parseCorcheteCer = Lexer$KanComp.parseCaracter("]");

var parseSignoAgrupacionAb = Lexer$KanComp.escoger(/* :: */[
      parseParenAb,
      /* :: */[
        parseLlaveAb,
        /* :: */[
          parseCorcheteAb,
          /* [] */0
        ]
      ]
    ]);

var parseSignoAgrupacionCer = Lexer$KanComp.escoger(/* :: */[
      parseParenCer,
      /* :: */[
        parseLlaveCer,
        /* :: */[
          parseCorcheteCer,
          /* [] */0
        ]
      ]
    ]);

var parserGeneral = Lexer$KanComp.parseVariasOpciones(/* :: */[
      Lexer$KanComp.mapTipo(parseIndentacion, /* Indentacion */0),
      /* :: */[
        Lexer$KanComp.mapTipo(parseNuevaLinea, /* NuevaLinea */1),
        /* :: */[
          Lexer$KanComp.mapTipo(parseComentarioMulti, /* Comentario */5),
          /* :: */[
            Lexer$KanComp.mapTipo(parseComentario, /* Comentario */5),
            /* :: */[
              Lexer$KanComp.mapTipo(parseIdentificadorTipo, /* IdentificadorTipo */2),
              /* :: */[
                Lexer$KanComp.mapTipo(parseIdentificador, /* Identificador */3),
                /* :: */[
                  Lexer$KanComp.mapTipo(parseGenerico, /* Generico */4),
                  /* :: */[
                    Lexer$KanComp.mapTipo(parseNumero, /* Numero */6),
                    /* :: */[
                      Lexer$KanComp.mapTipo(parseTexto, /* Texto */7),
                      /* :: */[
                        Lexer$KanComp.mapTipo(parseOperadores, /* Operadores */8),
                        /* :: */[
                          Lexer$KanComp.mapTipo(parseSignoAgrupacionAb, /* AgrupacionAb */9),
                          /* :: */[
                            Lexer$KanComp.mapTipo(parseSignoAgrupacionCer, /* AgrupacionCer */10),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var EstadoInvalido = Caml_exceptions.create("Gramatica-KanComp.EstadoInvalido");

function tknToStr(token2) {
  switch (token2.tag | 0) {
    case /* TNuevaLinea */0 :
        return "TNuevaLinea";
    case /* TGenerico */2 :
        return "TGenerico";
    case /* TComentario */3 :
        return "TComentario";
    case /* TNumero */4 :
        return "TNumero";
    case /* TTexto */5 :
        return "TTexto";
    case /* TBool */6 :
        return "TBool";
    case /* TIdentificador */1 :
    case /* TOperador */7 :
        return token2[0].valor;
    case /* TParenAb */8 :
        return "TParenAb";
    case /* TParenCer */9 :
        return "TParenCer";
    case /* TAgrupAb */10 :
        return "TAgrupAb";
    case /* TAgrupCer */11 :
        return "TAgrupCer";
    case /* PC_LET */12 :
        return "PC_LET";
    case /* PC_CONST */13 :
        return "PC_CONST";
    
  }
}

function crearLexer(entrada) {
  var tamanoEntrada = entrada.length;
  var esInicioDeLinea = {
    contents: true
  };
  var numLineaActual = {
    contents: 1
  };
  var posAbsInicioLinea = {
    contents: 0
  };
  var posActual = {
    contents: 0
  };
  var indentacionActual = {
    contents: 0
  };
  var tokensRestantes = {
    contents: /* [] */0
  };
  var ultimoToken = {
    contents: undefined
  };
  var resultadoLookAheadSignificativo = {
    contents: undefined
  };
  var tokensRestantesAStr = function (param) {
    var _tokens = tokensRestantes.contents;
    var _acc = "";
    while(true) {
      var acc = _acc;
      var tokens = _tokens;
      if (tokens) {
        var x = tokens[0];
        var stdAdc;
        stdAdc = typeof x === "number" ? "EOF" : (
            x.tag ? "ErrorLexer(" + (String(x[0]) + ")") : tknToStr(x[0])
          );
        _acc = acc + (stdAdc + ", ");
        _tokens = tokens[1];
        continue ;
      } else {
        return acc;
      }
    };
  };
  var debug = function (param) {
    console.log("\n-----------------------------");
    console.log("Estado actual del lexer:");
    var v = esInicioDeLinea.contents;
    console.log("esInicioDeLinea: " + (String(v) + ""));
    var v$1 = posActual.contents;
    console.log("posActual: " + (String(v$1) + ""));
    var v$2 = tokensRestantesAStr(/* () */0);
    console.log("tokensRestantes: [" + (String(v$2) + "]"));
    var v$3 = ultimoToken.contents;
    console.log("ultimoToken:");
    console.log(v$3);
    console.log("-----------------------------\n");
    return /* () */0;
  };
  var sigTokenLuegoDeIdentacion = function (_posActual) {
    while(true) {
      var posActual = _posActual;
      var sigToken = Lexer$KanComp.run(parserGeneral, entrada, posActual);
      if (sigToken.tag) {
        return /* tuple */[
                /* Nada */11,
                -1
              ];
      } else {
        var ex = sigToken[0];
        var match = ex.tipo;
        if (match !== 0) {
          return /* tuple */[
                  ex.tipo,
                  posActual
                ];
        } else {
          _posActual = ex.posFinal;
          continue ;
        }
      }
    };
  };
  var extraerToken = function (_param) {
    while(true) {
      if (posActual.contents >= tamanoEntrada) {
        return /* EOF */0;
      } else {
        var resultado = Lexer$KanComp.run(parserGeneral, entrada, posActual.contents);
        if (resultado.tag) {
          return /* ErrorLexer */Block.__(1, [resultado[0]]);
        } else {
          var ex = resultado[0];
          var opComun = (function(ex){
          return function opComun(param) {
            esInicioDeLinea.contents = false;
            posActual.contents = ex.posFinal;
            return /* () */0;
          }
          }(ex));
          var crearToken2 = (function(ex){
          return function crearToken2(tipo, valor) {
            opComun(/* () */0);
            return /* Token */Block.__(0, [
                      Curry._1(tipo, {
                            valor: valor,
                            inicio: ex.posInicio,
                            final: ex.posFinal,
                            numLinea: numLineaActual.contents,
                            posInicioLinea: posAbsInicioLinea.contents
                          }),
                      indentacionActual.contents
                    ]);
          }
          }(ex));
          var match = ex.tipo;
          switch (match) {
            case /* Indentacion */0 :
                if (esInicioDeLinea.contents) {
                  var match$1 = sigTokenLuegoDeIdentacion(ex.posFinal);
                  var sigPos = match$1[1];
                  var tipo = match$1[0];
                  if (tipo !== 1) {
                    if (tipo >= 11) {
                      return /* EOF */0;
                    } else {
                      posActual.contents = ex.posFinal;
                      posActual.contents = sigPos;
                      indentacionActual.contents = sigPos - ex.posInicio | 0;
                      _param = /* () */0;
                      continue ;
                    }
                  } else {
                    posActual.contents = sigPos;
                    indentacionActual.contents = 0;
                    _param = /* () */0;
                    continue ;
                  }
                } else {
                  posActual.contents = ex.posFinal;
                  _param = /* () */0;
                  continue ;
                }
            case /* NuevaLinea */1 :
                var resultado_000 = /* TNuevaLinea */Block.__(0, [{
                      valor: /* () */0,
                      inicio: ex.posInicio,
                      final: ex.posFinal,
                      numLinea: numLineaActual.contents,
                      posInicioLinea: posAbsInicioLinea.contents
                    }]);
                var resultado_001 = indentacionActual.contents;
                var resultado$1 = /* Token */Block.__(0, [
                    resultado_000,
                    resultado_001
                  ]);
                posActual.contents = ex.posFinal;
                esInicioDeLinea.contents = true;
                indentacionActual.contents = 0;
                numLineaActual.contents = numLineaActual.contents + 1 | 0;
                posAbsInicioLinea.contents = ex.posFinal;
                return resultado$1;
            case /* IdentificadorTipo */2 :
            case /* Identificador */3 :
                break;
            case /* Generico */4 :
                return crearToken2((function (x) {
                              return /* TGenerico */Block.__(2, [x]);
                            }), ex.res);
            case /* Comentario */5 :
                return crearToken2((function (x) {
                              return /* TComentario */Block.__(3, [x]);
                            }), ex.res);
            case /* Numero */6 :
                return crearToken2((function (x) {
                              return /* TNumero */Block.__(4, [x]);
                            }), Number(ex.res));
            case /* Texto */7 :
                return crearToken2((function (x) {
                              return /* TTexto */Block.__(5, [x]);
                            }), ex.res);
            case /* Operadores */8 :
                return crearToken2((function (x) {
                              return /* TOperador */Block.__(7, [x]);
                            }), ex.res);
            case /* AgrupacionAb */9 :
                var match$2 = ex.res;
                if (match$2 === "(") {
                  return crearToken2((function (x) {
                                return /* TParenAb */Block.__(8, [x]);
                              }), ex.res);
                } else {
                  return crearToken2((function (x) {
                                return /* TAgrupAb */Block.__(10, [x]);
                              }), ex.res);
                }
            case /* AgrupacionCer */10 :
                var match$3 = ex.res;
                if (match$3 === ")") {
                  return crearToken2((function (x) {
                                return /* TParenCer */Block.__(9, [x]);
                              }), ex.res);
                } else {
                  return crearToken2((function (x) {
                                return /* TAgrupCer */Block.__(11, [x]);
                              }), ex.res);
                }
            case /* Nada */11 :
                return /* ErrorLexer */Block.__(1, ["Se encontr\xc3\xb3 un token huerfano"]);
            
          }
          var match$4 = ex.res;
          switch (match$4) {
            case "const" :
                return crearToken2((function (x) {
                              return /* PC_CONST */Block.__(13, [x]);
                            }), "const");
            case "false" :
                return crearToken2((function (x) {
                              return /* TBool */Block.__(6, [x]);
                            }), false);
            case "let" :
                return crearToken2((function (x) {
                              return /* PC_LET */Block.__(12, [x]);
                            }), "let");
            case "true" :
                return crearToken2((function (x) {
                              return /* TBool */Block.__(6, [x]);
                            }), true);
            default:
              return crearToken2((function (x) {
                            return /* TIdentificador */Block.__(1, [x]);
                          }), ex.res);
          }
        }
      }
    };
  };
  tokensRestantes.contents = /* :: */[
    extraerToken(/* () */0),
    /* [] */0
  ];
  var sigToken = function (param) {
    var match = tokensRestantes.contents;
    var tokenRespuesta;
    if (match) {
      var match$1 = match[1];
      var token1 = match[0];
      if (match$1) {
        tokensRestantes.contents = Pervasives.$at(/* :: */[
              match$1[0],
              /* [] */0
            ], match$1[1]);
        tokenRespuesta = token1;
      } else {
        resultadoLookAheadSignificativo.contents = undefined;
        tokensRestantes.contents = /* :: */[
          extraerToken(/* () */0),
          /* [] */0
        ];
        tokenRespuesta = token1;
      }
    } else {
      throw [
            EstadoInvalido,
            /* () */0
          ];
    }
    ultimoToken.contents = tokenRespuesta;
    return tokenRespuesta;
  };
  var lookAhead = function (param) {
    var match = tokensRestantes.contents;
    if (match) {
      return match[0];
    } else {
      throw [
            EstadoInvalido,
            /* () */0
          ];
    }
  };
  var retroceder = function (param) {
    var match = tokensRestantes.contents;
    if (match) {
      if (match[1]) {
        return /* () */0;
      } else {
        var match$1 = ultimoToken.contents;
        if (match$1 !== undefined) {
          tokensRestantes.contents = /* :: */[
            match$1,
            /* :: */[
              match[0],
              /* [] */0
            ]
          ];
          return /* () */0;
        } else {
          return /* () */0;
        }
      }
    } else {
      throw [
            EstadoInvalido,
            /* () */0
          ];
    }
  };
  var lookAheadSignificativo = function (ignorarPrimerToken) {
    var pre = function (_tokensAct, _hayNuevaLinea) {
      while(true) {
        var hayNuevaLinea = _hayNuevaLinea;
        var tokensAct = _tokensAct;
        if (tokensAct) {
          var t = tokensAct[0];
          if (typeof t === "number" || t.tag) {
            return /* tuple */[
                    t,
                    -1,
                    hayNuevaLinea,
                    tokensAct
                  ];
          } else if (t[0].tag) {
            return /* tuple */[
                    t,
                    t[1],
                    hayNuevaLinea,
                    tokensAct
                  ];
          } else {
            _hayNuevaLinea = true;
            _tokensAct = tokensAct[1];
            continue ;
          }
        } else {
          var tokensList = /* [] */0;
          var _hayNuevaLinea$1 = hayNuevaLinea;
          while(true) {
            var hayNuevaLinea$1 = _hayNuevaLinea$1;
            var sigToken = extraerToken(/* () */0);
            if (typeof sigToken !== "number" && !sigToken.tag) {
              if (sigToken[0].tag) {
                return /* tuple */[
                        sigToken,
                        sigToken[1],
                        hayNuevaLinea$1,
                        Pervasives.$at(tokensList, /* :: */[
                              sigToken,
                              /* [] */0
                            ])
                      ];
              } else {
                _hayNuevaLinea$1 = true;
                continue ;
              }
            }
            return /* tuple */[
                    sigToken,
                    -1,
                    hayNuevaLinea$1,
                    Pervasives.$at(tokensList, /* :: */[
                          sigToken,
                          /* [] */0
                        ])
                  ];
          };
        }
      };
    };
    var match = resultadoLookAheadSignificativo.contents;
    if (match !== undefined) {
      return match;
    } else {
      var match$1 = tokensRestantes.contents;
      var match$2;
      if (match$1) {
        if (ignorarPrimerToken) {
          var match$3 = pre(match$1[1], false);
          match$2 = /* tuple */[
            match$3[0],
            match$3[1],
            match$3[2],
            Pervasives.$at(/* :: */[
                  match$1[0],
                  /* [] */0
                ], match$3[3])
          ];
        } else {
          match$2 = pre(tokensRestantes.contents, false);
        }
      } else {
        throw [
              EstadoInvalido,
              /* () */0
            ];
      }
      var token = match$2[0];
      tokensRestantes.contents = match$2[3];
      var resultado_001 = match$2[1];
      var resultado_002 = match$2[2];
      var resultado_003 = function (param) {
        resultadoLookAheadSignificativo.contents = undefined;
        tokensRestantes.contents = /* :: */[
          token,
          /* [] */0
        ];
        return /* () */0;
      };
      var resultado = /* tuple */[
        token,
        resultado_001,
        resultado_002,
        resultado_003
      ];
      resultadoLookAheadSignificativo.contents = resultado;
      return resultado;
    }
  };
  return {
          entrada: entrada,
          sigToken: sigToken,
          lookAhead: lookAhead,
          retroceder: retroceder,
          hayTokens: (function (param) {
              return posActual.contents <= entrada.length;
            }),
          lookAheadSignificativo: lookAheadSignificativo,
          debug: debug
        };
}

var signosAgrupacion = /* :: */[
  "(",
  /* :: */[
    ")",
    /* :: */[
      "{",
      /* :: */[
        "}",
        /* :: */[
          "[",
          /* :: */[
            "]",
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

exports.operadores = operadores;
exports.digitos = digitos;
exports.mayusculas = mayusculas;
exports.minusculas = minusculas;
exports.signosAgrupacion = signosAgrupacion;
exports.parseDigito = parseDigito;
exports.parseMayuscula = parseMayuscula;
exports.parseMinuscula = parseMinuscula;
exports.parseGuionBajo = parseGuionBajo;
exports.parseComillaSimple = parseComillaSimple;
exports.parseDolar = parseDolar;
exports.charListToStr = charListToStr;
exports.parseOperador = parseOperador;
exports.parseOperadores = parseOperadores;
exports.parseNumero = parseNumero;
exports.parseTexto = parseTexto;
exports.parseNuevaLinea = parseNuevaLinea;
exports.parseComentario = parseComentario;
exports.parseComentarioMulti = parseComentarioMulti;
exports.parseRestoIdentificador = parseRestoIdentificador;
exports.parseGenerico = parseGenerico;
exports.parseIdentificador = parseIdentificador;
exports.parseIdentificadorTipo = parseIdentificadorTipo;
exports.parseIndentacion = parseIndentacion;
exports.parseParenAb = parseParenAb;
exports.parseParenCer = parseParenCer;
exports.parseLlaveAb = parseLlaveAb;
exports.parseLlaveCer = parseLlaveCer;
exports.parseCorcheteAb = parseCorcheteAb;
exports.parseCorcheteCer = parseCorcheteCer;
exports.parseSignoAgrupacionAb = parseSignoAgrupacionAb;
exports.parseSignoAgrupacionCer = parseSignoAgrupacionCer;
exports.parserGeneral = parserGeneral;
exports.EstadoInvalido = EstadoInvalido;
exports.tknToStr = tknToStr;
exports.crearLexer = crearLexer;
/* parseDigito Not a pure module */
