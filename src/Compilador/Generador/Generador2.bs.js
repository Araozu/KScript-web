// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var SourceMap = require("source-map");

function crearCodeWithSourceMap(expr, toplevel, nivel, nombreArchivo) {
  var nombreArchivo$1 = nombreArchivo === "" ? undefined : nombreArchivo;
  var inner = function (expr, toplevel, nivel) {
    var indentacionNivel = $$String.make((nivel << 2), /* " " */32);
    var indentacionNivelSig = $$String.make(((nivel + 1 | 0) << 2), /* " " */32);
    var indentacionNivelAnt = nivel === 0 ? "" : $$String.make(((nivel - 1 | 0) << 2), /* " " */32);
    var generarJS_EIdentificador = function (identificador) {
      var strRes = identificador.valorId.valor;
      return /* tuple */[
              new SourceMap.SourceNode(identificador.valorId.numLinea, identificador.valorId.inicio - identificador.valorId.posInicioLinea | 0, nombreArchivo$1, strRes),
              0
            ];
    };
    switch (expr.tag | 0) {
      case /* EIdentificador */0 :
          return generarJS_EIdentificador(expr[0]);
      case /* ENumero */2 :
          var info = expr[0];
          var valor = info.valor.toString();
          return /* tuple */[
                  new SourceMap.SourceNode(info.numLinea, info.inicio - info.posInicioLinea | 0, nombreArchivo$1, valor),
                  0
                ];
      case /* ETexto */3 :
          var info$1 = expr[0];
          var strRes = "\"" + (info$1.valor + "\"");
          return /* tuple */[
                  new SourceMap.SourceNode(info$1.numLinea, info$1.inicio - info$1.posInicioLinea | 0, nombreArchivo$1, strRes),
                  0
                ];
      case /* EBool */4 :
          var info$2 = expr[0];
          var strRes$1 = info$2.valor ? "true" : "false";
          return /* tuple */[
                  new SourceMap.SourceNode(info$2.numLinea, info$2.inicio - info$2.posInicioLinea | 0, nombreArchivo$1, strRes$1),
                  0
                ];
      case /* EUnidad */1 :
      case /* EOperador */5 :
          break;
      case /* EOperadorApl */6 :
          var eOpApl = expr[0];
          var op = eOpApl.op;
          var operador = op.valorOp.valor;
          var precedenciaOp = op.precedencia;
          var match = inner(eOpApl.izq, false, nivel);
          var precedenciaJsIzq = match[1];
          var nodoIzq = match[0];
          var match$1 = inner(eOpApl.der, false, nivel);
          var precedenciaJsDer = match$1[1];
          var nodoDer = match$1[0];
          var nuevoNodoIzq = precedenciaJsIzq > 0 && precedenciaJsIzq < precedenciaOp ? new SourceMap.SourceNode(nodoIzq.line, nodoIzq.column, nombreArchivo$1, /* tuple */[
                  "(",
                  nodoIzq,
                  ")"
                ]) : nodoIzq;
          var nuevoNodoDer = precedenciaJsDer > 0 && precedenciaJsDer < precedenciaOp ? new SourceMap.SourceNode(nodoIzq.line, nodoIzq.column, nombreArchivo$1, /* tuple */[
                  "(",
                  nodoDer,
                  ")"
                ]) : nodoDer;
          var jsOpFinal;
          switch (operador) {
            case "," :
                jsOpFinal = operador + " ";
                break;
            case "." :
            case "?." :
                jsOpFinal = operador;
                break;
            default:
              jsOpFinal = operador === "ñ" || operador === "Ñ" ? " " : " " + (operador + " ");
          }
          var nodoOp = new SourceMap.SourceNode(op.valorOp.numLinea, op.valorOp.inicio - op.valorOp.posInicioLinea | 0, nombreArchivo$1, jsOpFinal);
          var retorno = new SourceMap.SourceNode(nodoIzq.line, nodoIzq.column, nombreArchivo$1, [
                nuevoNodoIzq,
                nodoOp,
                nuevoNodoDer
              ]);
          return /* tuple */[
                  retorno,
                  precedenciaOp
                ];
      case /* EDeclaracion */7 :
          var dec = expr[0];
          var inicio = dec.mut ? "let" : "const";
          var match$2 = generarJS_EIdentificador(dec.id);
          var snId = match$2[0];
          var match$3 = inner(dec.valorDec, false, nivel + 1 | 0);
          var snResto = match$3[0];
          var match$4 = dec.valorDec;
          if (match$4.tag === /* EDeclaracion */7) {
            var codigoRes_001 = /* tuple */[
              inicio,
              " ",
              snId,
              " = ",
              "(() => {\n",
              indentacionNivelSig,
              snResto,
              "\n",
              indentacionNivelSig,
              "return undefined;\n",
              indentacionNivel,
              "})()"
            ];
            var res = new SourceMap.SourceNode(dec.id.valorId.numLinea, dec.id.valorId.inicio - dec.id.valorId.posInicioLinea | 0, nombreArchivo$1, codigoRes_001);
            return /* tuple */[
                    res,
                    0
                  ];
          } else {
            var codigoRes_001$1 = /* tuple */[
              inicio,
              " ",
              snId,
              " = ",
              snResto
            ];
            var res$1 = new SourceMap.SourceNode(dec.id.valorId.numLinea, dec.id.valorId.inicio - dec.id.valorId.posInicioLinea | 0, nombreArchivo$1, codigoRes_001$1);
            return /* tuple */[
                    res$1,
                    0
                  ];
          }
      case /* EBloque */8 :
          var exprs = expr[0];
          var toplevel$1 = toplevel;
          var generarInner = function (exprs) {
            if (exprs) {
              var es = exprs[1];
              var e = exprs[0];
              if (List.length(es) === 0) {
                if (toplevel$1) {
                  var match = inner(e, false, nivel);
                  var snJs = match[0];
                  return new SourceMap.SourceNode(snJs.line, snJs.column, nombreArchivo$1, /* tuple */[
                              indentacionNivel,
                              snJs,
                              ";"
                            ]);
                } else if (e.tag === /* EDeclaracion */7) {
                  var match$1 = inner(e, false, nivel);
                  var snJs$1 = match$1[0];
                  var codigoRes_001 = /* tuple */[
                    indentacionNivel,
                    snJs$1,
                    ";\n",
                    indentacionNivel,
                    "return undefined;"
                  ];
                  return new SourceMap.SourceNode(snJs$1.line, snJs$1.column, nombreArchivo$1, codigoRes_001);
                } else {
                  var match$2 = inner(e, false, nivel);
                  var snJs$2 = match$2[0];
                  var codigoRes_001$1 = /* tuple */[
                    indentacionNivel,
                    "return ",
                    snJs$2,
                    ";"
                  ];
                  return new SourceMap.SourceNode(snJs$2.line, snJs$2.column, nombreArchivo$1, codigoRes_001$1);
                }
              } else {
                var match$3 = inner(e, false, nivel);
                var snJs$3 = match$3[0];
                var codigoRes_001$2 = /* tuple */[
                  indentacionNivel,
                  snJs$3,
                  ";",
                  "\n",
                  generarInner(es)
                ];
                return new SourceMap.SourceNode(snJs$3.line, snJs$3.column, nombreArchivo$1, codigoRes_001$2);
              }
            } else {
              return new SourceMap.SourceNode(0, 0, nombreArchivo$1, "");
            }
          };
          var jsRestorno;
          if (toplevel$1) {
            jsRestorno = generarInner(exprs);
          } else {
            var jsGen = generarInner(exprs);
            var codigoRes_001$2 = /* tuple */[
              "(() => {\n",
              jsGen,
              "\n",
              indentacionNivelAnt,
              "})()"
            ];
            jsRestorno = new SourceMap.SourceNode(jsGen.line, jsGen.column, nombreArchivo$1, codigoRes_001$2);
          }
          return /* tuple */[
                  jsRestorno,
                  0
                ];
      
    }
    return /* tuple */[
            new SourceMap.SourceNode(0, 0, nombreArchivo$1, ""),
            0
          ];
  };
  return inner(expr, toplevel, nivel);
}

exports.crearCodeWithSourceMap = crearCodeWithSourceMap;
/* source-map Not a pure module */
